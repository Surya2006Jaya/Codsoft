def print_board(board):
    """Print the current game board."""
    print("\n")
    for i in range(3):
        print(" " + board[i*3] + " | " + board[i*3+1] + " | " + board[i*3+2])
        if i < 2:
            print("-----------")
    print("\n")

def check_win(board, player):
    """Check if the specified player has won."""
    win_conditions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
        [0, 4, 8], [2, 4, 6]               # Diagonals
    ]
    return any(all(board[pos] == player for pos in line) for line in win_conditions)

def is_board_full(board):
    """Check if the board is full (draw condition)."""
    return '.' not in board

def get_human_move(board):
    """Get valid move input from the human player."""
    while True:
        try:
            move = int(input("Enter your move (1-9): "))
            if 1 <= move <= 9:
                idx = move - 1
                if board[idx] == '.':
                    return idx
                print("Position already occupied!")
            else:
                print("Number must be 1-9!")
        except ValueError:
            print("Invalid input! Enter a number.")

def minimax(board, depth, is_maximizing, alpha, beta, ai_player, human_player):
    """Minimax algorithm with Alpha-Beta pruning."""
    # Terminal state evaluations
    if check_win(board, ai_player):
        return 10 - depth
    if check_win(board, human_player):
        return depth - 10
    if is_board_full(board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for i in range(9):
            if board[i] == '.':
                board[i] = ai_player
                score = minimax(board, depth + 1, False, alpha, beta, ai_player, human_player)
                board[i] = '.'  # Undo move
                best_score = max(score, best_score)
                alpha = max(alpha, best_score)
                if beta <= alpha:
                    break
        return best_score
    else:
        best_score = float('inf')
        for i in range(9):
            if board[i] == '.':
                board[i] = human_player
                score = minimax(board, depth + 1, True, alpha, beta, ai_player, human_player)
                board[i] = '.'  # Undo move
                best_score = min(score, best_score)
                beta = min(beta, best_score)
                if beta <= alpha:
                    break
        return best_score

def get_ai_move(board, ai_player, human_player):
    """Determine the best move for the AI using Minimax."""
    best_score = -float('inf')
    best_move = None
    alpha = -float('inf')
    beta = float('inf')
    
    for i in range(9):
        if board[i] == '.':
            board[i] = ai_player
            score = minimax(board, 0, False, alpha, beta, ai_player, human_player)
            board[i] = '.'  # Undo move
            if score > best_score:
                best_score = score
                best_move = i
            alpha = max(alpha, best_score)
    return best_move

def main():
    """Main game loop."""
    print("\nWelcome to Tic-Tac-Toe!")
    print("Board positions:")
    print_board([str(i+1) for i in range(9)])
    
    # Determine who goes first
    human_first = input("Do you want to go first? (y/n): ").lower() == 'y'
    ai_player = 'X' if not human_first else 'O'
    human_player = 'O' if not human_first else 'X'
    
    board = ['.'] * 9
    current_player = human_player if human_first else ai_player
    
    print(f"\nYou are '{human_player}', AI is '{ai_player}'")
    if not human_first:
        print("AI goes first!")
    
    # Game loop
    while True:
        print_board(board)
        
        # Human player's turn
        if current_player == human_player:
            print("Your turn!")
            move = get_human_move(board)
            board[move] = human_player
            
            if check_win(board, human_player):
                print_board(board)
                print("Congratulations! You won!")
                break
                
        # AI player's turn
        else:
            print("AI's turn...")
            move = get_ai_move(board, ai_player, human_player)
            board[move] = ai_player
            print(f"AI placed at position {move + 1}")
            
            if check_win(board, ai_player):
                print_board(board)
                print("AI wins!")
                break
        
        # Check for draw
        if is_board_full(board):
            print_board(board)
            print("It's a draw!")
            break
        
        # Switch players
        current_player = human_player if current_player == ai_player else ai_player

if __name__ == "__main__":
    main()
